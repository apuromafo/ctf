Aqui emplea un sistema de codificación muy similar a como se ven en los 
HackLab{fl4gcryptochalleng3}


Todo comienza leyendo esto cifrado , pero muestra algo descifrado, la primera idea es ver un
terminal de ssh, pero en este caso no sabemos si es DES, si es VIGENIERE, 
si usa alguna operatoria en particular, pero nos da un mensaje y una clave a resolver
para esto hare uso de 

https://www.dcode.fr/ascii-code para cambia el EEGOPGF a ascii y tenerla como key antes de operar
https://cryptii.com/vigenere-cipher verificar si es vigeniere, y ver algunas veces como se convierte
en este caso solo basta el ascii code (decode ) desde el key y copiar en hexa, eso es todo lo que 
usaré, las pruebas fallidas no las colocaré porque se gasto bastante tiempo en ello.

vamos a la obra
/*info del reto*/
[0:3:0d:20:29:0:2:29:2a:0:2:67:0f:0:1:2e:0:4:33:3b:1c:31:0:1:25:0:1:67]EEGOPGF
[0:1:0e:0:1:31:0:2:2d:22:0:4:22:20:28:6d:0:2:27:3c:0:3:71:12:05:0:3:17:71:1e:0:3:36:34:31:0:4:3b:30:75:10:0:1:32:0:3:26:3b:26:0:2:3d:3c]YTAMSQQXUVOR
[0:4:07:2e:2c:24:0:1:19:0:2:29:2a:0:2:2d:30:0:2:3e:66:0:2:36:32:0:2:35:3e:0:2:34:30:0:4:3a:36:3d:34:0:3:28:28:21:0:1:36:0:3:35:61:2f]OUHVRQGDUDXR

EEGOPGF = Hello HackLab!
YTAMSQQXUVOR = Welcome to CTF Online Edition
OUHVRQGDUDXR = ????????????????????????????????
/*info del reto*/

para hello hacklab se usa en ascii (ordinal) , ya referi la pagina
EEGOPGF en ascii es :  45 45 47 4F 50 47 46
segun regla de formacion los caracteres fueron cifrados

0:n  siendo 0 el indice y n el numero de bytes a cifrar segun la informacion
[0:3:0d:20:29:0:2:29:2a:0:2:67:0f:0:1:2e:0:4:33:3b:1c:31:0:1:25:0:1:67]
key:45         key:45   key:47    key:4f   key:50        key:47   key:46 
#3   0d:20:29  #2 29:2a #2 67:0f  #1 2e  #4 33:3b:1c:31  #1 25    #1 67
aplicamos el calculo en 2 formas decimal o hexa, si es decimal 20 si es hexa 0x20, pero si usamos
un resultado en general en python lo procesa decimal (por defecto)
para el primer caracter es ordinal (ascii) que proviene de la clave para cifrar 
esto es haciendo uso de los conocidos or, and, xor, probamos con xor y nos resultó de inmediato.
print(ord('E') ^ 0x20) = 72 decimal  corresponde a H mayuscula http://www.asciitable.com/
calculadora de windows, es mas rapido pero lento xD
45 (que corresponde al ascii de E)  xor 0d  = 48 hex que corresponde a H mayuscula http://www.asciitable.com/
seguimos asi para cada término y confirmamos que  nos da la misma frase

luego viene la siguiente frase
YTAMSQQXUVOR  es la siguiente key 59 54 41 4D 53 51 51 58 55 56 4F 52
cantidad de bytes que cifra       #1 #1 #2 #4 #2 #3 #3 #3 #4 #1 #3 #2        
 la cual al decodificar tambien se obtiene la frase segunda que se ve
 
ahora confirmada la teoria , toca resolver
ahora viene el pedido
decodificando las posiciones (con gato)
luego OUHVRQGDUDXR  a ascii = 4F 55 48 56 52 51 47 44 55 44 58 52
cantidad de bytes que cifra   #4 #1 #2 #2 #2 #2 #2 #2 #4 #3 #1 #3
frase: Welcome to CTF Online Edition
[0:4:07:2e:2c:24:0:1:19:0:2:29:2a:0:2:2d:30:0:2:3e:66:0:2:36:32:0:2:35:3e:0:2:34:30:0:4:3a:36:3d:34:0:3:28:28:21:0:1:36:0:3:35:61:2f]OUHVRQGDUDXR
#4 key 4F        #1      #2        #2        #2        #2        #2       #2        #4              #3           #1       #3
y asi cada uno xor, decodificamos el flag que es
0a 48 61 63 6b 4c 61 62 7b 66 6c 34 67 63 72 79 70 74 6f 63 68 61 6c 6c 65 6e 67 33 7d  ->hexa
HackLab{fl4gcryptochalleng3}






